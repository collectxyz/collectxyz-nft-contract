{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "description": "This overrides the ExecuteMsg enum defined in cw721-base",
  "type": "object",
  "required": [
    "captcha_public_key",
    "config"
  ],
  "properties": {
    "captcha_public_key": {
      "type": "string"
    },
    "config": {
      "$ref": "#/definitions/Config"
    }
  },
  "definitions": {
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Config": {
      "type": "object",
      "required": [
        "base_move_fee",
        "base_move_nanos",
        "max_coordinate_value",
        "mint_fee",
        "move_fee_per_step",
        "move_nanos_per_step",
        "public_minting_enabled",
        "token_supply",
        "wallet_limit"
      ],
      "properties": {
        "base_move_fee": {
          "description": "The base fee to initiate a move. To get overall move fee: base_move_fee.amount + move_fee_per_step * distance",
          "allOf": [
            {
              "$ref": "#/definitions/Coin"
            }
          ]
        },
        "base_move_nanos": {
          "description": "The time it takes to initiate a move. To get overall move time: base_move_nanos + move_nanos_per_step * distance",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "max_coordinate_value": {
          "description": "The maximum value of a coordinate in any dimension. The minimum will be set to the negation of this value.",
          "type": "integer",
          "format": "int64"
        },
        "mint_fee": {
          "description": "The price to mint a new xyz (doesn't apply to the contract owner)",
          "allOf": [
            {
              "$ref": "#/definitions/Coin"
            }
          ]
        },
        "move_fee_per_step": {
          "description": "The increase in move fee price per marginal step taken, where a step is a one-dimensional coordinate increment or decrement. Assumed to be in the denom associated with base_move_fee.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "move_nanos_per_step": {
          "description": "The move travel time per marginal step taken, where a step is a one-dimensional coordinate increment or decrement.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "public_minting_enabled": {
          "description": "If true, then anyone can mint an xyz token. If false, then only the contract owner is authorized to mint.",
          "type": "boolean"
        },
        "token_supply": {
          "description": "The maximum allowed number of xyz tokens",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "wallet_limit": {
          "description": "The maximum number of tokens a particular wallet can hold",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
